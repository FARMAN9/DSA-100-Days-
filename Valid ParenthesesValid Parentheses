
class Solution:
    def isValid(self, s: str) -> bool:
        # Define a stack to track open brackets
        stack = []

        # Dictionary to match closing brackets with opening brackets
        matching_brackets = {
            ')': '(',
            '}': '{',
            ']': '['
        }

        # Iterate through each character in the string
        for char in s:
            if char in matching_brackets.values():
                # If the character is an open bracket, push it onto the stack
                stack.append(char)
            elif char in matching_brackets:
                # If the character is a close bracket
                # Check if the stack is empty or the top of the stack doesn't match the corresponding open bracket
                if not stack or stack[-1] != matching_brackets[char]:
                    return False
                # Pop the top of the stack if it matches
                stack.pop()

        # If the stack is empty, all open brackets were closed properly, return True
        return len(stack) == 0

# Example usage:
s = "{[()]}"
print(Solution().isValid(s))  # Output: True
